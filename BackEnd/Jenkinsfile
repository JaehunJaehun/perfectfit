pipeline {
    agent any
    environment {
        REPO = "s10-ai-speech-sub2/S10P22C205"
        DOCKERHUB_REGISTRY = "kimhyeokil/back"
        DOCKERHUB_CREDENTIALS = credentials('Docker-credential')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/BackEnd") {
                    script {
                        sh "ls -al"
                        sh "chmod +x ./gradlew"
                    }
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "/usr/bin/docker build -t ${DOCKERHUB_REGISTRY} BackEnd"
                }
            }
        }
        stage("Login") {
            steps {
                 sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | /usr/bin/docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "/usr/bin/docker push ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Prune old images') {
            steps {
                script {
                    sh "/usr/bin/docker ps"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "/usr/bin/docker stop back || true"  // Ignore error if container doesn't exist
                        sh "/usr/bin/docker rm back || true"    // Ignore error if container doesn't exist
                        sh "/usr/bin/docker rmi ${DOCKERHUB_REGISTRY}|| true"     //images 날리기
                        sh "/usr/bin/docker pull ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        try {
                            sh "/usr/bin/docker-compose -f ${env.WORKSPACE}/docker-compose.yml up -d"
                        } catch(Exception e) {
                            sh "/usr/bin/docker restart back || true"  // Ignore error if container doesn't exist
                        }
                    }
                }
            }
        }
    }
}
